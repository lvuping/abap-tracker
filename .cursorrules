# SAP ABAP SY-UNAME 추적기 프로젝트 규칙

## 프로젝트 개요
이 프로젝트는 SAP ABAP 코드에서 SY-UNAME 시스템 변수의 흐름을 추적하여, **실제 데이터베이스 테이블과 필드명**을 정확히 감지하는 고도화된 분석 도구입니다.

### 핵심 목표
- SY-UNAME이 어떤 테이블의 어떤 필드에 UPDATE/INSERT/MODIFY/DELETE 되는지 추적
- 구조체 변수(ls_document-created_by)가 아닌 실제 테이블명과 필드명(ZDOCUMENTS, CREATED_BY) 제공
- 21가지 ABAP 패턴 지원으로 완벽한 변수 흐름 추적

## 프로젝트 구조

### 핵심 파일들
- `main.py`: 메인 실행 엔진 (105줄)
- `analyzer.py`: 고도화된 분석 엔진 (538줄) - 프로젝트의 핵심
- `patterns.py`: 21가지 ABAP 패턴 정의 (175줄)
- `USAGE_GUIDE.md`: 상세 사용 가이드 (244줄)

### 입력/출력 디렉토리
- `input/`: ABAP 소스 파일과 SY-UNAME 위치 정보 (CSV)
- `output/`: 분석 결과 JSON 파일
- `tests/`: 종합 테스트 스크립트들

## 핵심 개념

### 1. Tainted Variables (오염된 변수)
- SY-UNAME에서 시작하여 전파되는 모든 변수들
- 집합(set) 자료구조로 관리: `tainted_vars = {"sy-uname"}`
- 대소문자 구분 없이 소문자로 정규화하여 저장

### 2. Trace Path (추적 경로)
- 변수 전파의 각 단계를 기록
- 형식: `Line {line_num}: {operation} '{source}' -> '{target}'`
- 최대 13단계까지 복잡한 흐름 추적 가능

### 3. Sink Detection (종착점 감지)
우선순위 순서:
1. **DATABASE 작업** (최우선) - UPDATE/INSERT/MODIFY/DELETE
2. RFC 호출
3. CALL TRANSACTION
4. 감사 필드 할당 (낮은 우선순위)

### 4. 구조체-테이블 매핑
```
ls_document-created_by (구조체 필드) → INSERT zdocuments → ZDOCUMENTS.CREATED_BY (실제 테이블 필드)
```

## 지원하는 21가지 ABAP 패턴

### 기본 할당 패턴 (6가지)
1. `ASSIGN_PATTERN`: 기본 할당 (=)
2. `MOVE_PATTERN`: MOVE 문
3. `MOVE_CORRESPONDING_PATTERN`: MOVE-CORRESPONDING
4. `CONCATENATE_PATTERN`: CONCATENATE 문
5. `SPLIT_PATTERN`: SPLIT 문
6. `REPLACE_PATTERN`: REPLACE 문

### 데이터베이스 작업 패턴 (4가지) ⭐ 최우선순위
7. `UPDATE_PATTERN`: UPDATE 문 (필드별 분석)
8. `INSERT_PATTERN`: INSERT 문 (구조체-테이블 매핑)
9. `MODIFY_PATTERN`: MODIFY 문
10. `DELETE_PATTERN`: DELETE 문

### 고급 패턴 (8가지)
11. `STRUCTURE_ASSIGN_PATTERN`: 구조체 필드 할당
12. `PERFORM_PATTERN`: PERFORM 호출
13. `WHERE_CONDITION_PATTERN`: WHERE 조건절
14. `APPEND_PATTERN`: APPEND 문
15. `SELECT_INTO_PATTERN`: SELECT INTO 문
16. `COMPUTE_PATTERN`: COMPUTE 계산식
17. `AUDIT_FIELD_PATTERN`: 감사 필드 (ERDAT, AENAM, CREATED_BY 등)
18. `RFC_CALL_PATTERN`: RFC 호출

### 시스템 호출 패턴 (3가지)
19. `CALL_TRANSACTION_PATTERN`: CALL TRANSACTION
20. `BDC_FIELD_PATTERN`: BDC 필드
21. `COMMIT_PATTERN`: COMMIT/ROLLBACK

## 코딩 스타일 규칙

### Python 코드
- 변수명: snake_case
- 함수명: snake_case
- 상수: UPPER_CASE
- 문자열: 일관되게 double quotes 사용
- 리스트/딕셔너리: trailing comma 사용

### ABAP 패턴 처리
- 모든 ABAP 코드는 대문자로 변환 후 처리: `line_upper = line.strip().upper()`
- 변수명은 소문자로 정규화: `variable.strip().lower()`
- 필드명은 대문자로 유지: `field.strip().upper()`

### 정규식 패턴
- 모든 패턴에 `re.IGNORECASE` 플래그 사용
- 복잡한 패턴은 `re.DOTALL` 추가
- 캡처 그룹은 명명된 그룹 사용: `(?P<name>...)`

## 중요한 분석 로직

### 1. 변수 전파 순서
```python
# 1. 기본 할당 패턴들 먼저 처리
# 2. Sink 감지 (데이터베이스 작업 우선)
# 3. 감사 필드는 임시 저장 후 계속 스캔
# 4. 전체 스캔 후 우선순위에 따라 결과 반환
```

### 2. 데이터베이스 필드 매핑
```python
# 구조체의 오염된 필드 감지
if tainted_var.startswith(source_var + "-"):
    field_name = tainted_var.split("-", 1)[1].upper()
    structure_fields.append(field_name)
```

### 3. 결과 타입 우선순위
1. `DATABASE_INSERT_FIELD` / `DATABASE_UPDATE_FIELD` / `DATABASE_MODIFY_FIELD`
2. `DATABASE_INSERT` / `DATABASE_UPDATE` / `DATABASE_MODIFY` / `DATABASE_DELETE`
3. `RFC`
4. `CALL_TRANSACTION`
5. `AUDIT_FIELD`

## 성과 지표

### 현재 달성 결과
- ✅ 패턴 매칭률: 100% (21/21 패턴)
- ✅ 실제 테이블/필드 감지: ZDOCUMENTS.CREATED_BY, CHANGED_BY
- ✅ 복잡한 변수 추적: 최대 13단계
- ✅ 비즈니스 시나리오 검증: 249줄 실제 코드 분석 성공

### 핵심 성공 사례
```json
{
  "type": "DATABASE_INSERT_FIELD",
  "table": "ZDOCUMENTS",
  "fields": ["CREATED_BY", "CHANGED_BY"],
  "operation": "INSERT"
}
```

## 테스트 전략

### 테스트 파일들
- `test_comprehensive.py`: 기본 기능 종합 테스트
- `test_extended_patterns.py`: 21가지 패턴 확장 테스트  
- `test_business_scenarios.py`: 실제 비즈니스 시나리오 테스트

### 테스트 실행
```bash
python test_comprehensive.py      # 기본 테스트
python test_business_scenarios.py # 비즈니스 테스트
python main.py                    # 전체 분석 실행
```

## 디버깅 가이드

### 일반적인 문제 해결
1. **RFC 미감지**: PERFORM/FORM 파라미터 매핑 확인
2. **테이블명 미감지**: 구조체 오염 상태 확인
3. **"Not Found" 결과**: SY-UNAME 위치와 분석 범위 확인

### 디버깅 정보 활용
```python
print(f"Tainted variables: {list(tainted_vars)}")
print(f"Trace path: {trace_path}")
print(f"Current line: {line}")
```

## 확장 가이드

### 새로운 패턴 추가
1. `patterns.py`에 정규식 패턴 정의
2. `analyzer.py`에 처리 로직 추가
3. 해당 테스트 케이스 작성
4. 우선순위 고려하여 적절한 위치에 배치

### 새로운 Sink 타입 추가
1. 패턴 정의 후 analyzer.py에 감지 로직 추가
2. `main.py`에 결과 출력 로직 추가
3. 우선순위 순서 조정

## 중요 주의사항

### 성능 고려사항
- 대용량 ABAP 파일 처리 시 메모리 사용량 주의
- 정규식 패턴 최적화로 처리 속도 향상
- 불필요한 중복 검사 방지

### 정확도 향상
- 대소문자 정규화 일관성 유지
- 구조체-테이블 매핑 정확도 검증
- False positive 최소화

### 유지보수
- 패턴 추가 시 기존 테스트 영향도 확인
- 코드 변경 시 전체 테스트 실행 필수
- 문서 업데이트 동시 진행

## 프로젝트 철학

> **"구조체 변수가 아닌 실제 데이터베이스 테이블과 필드명을 정확히 제공하여, 
> 실제 비즈니스 가치를 창출하는 분석 도구"**

이 프로젝트는 단순한 변수 추적을 넘어서, SAP 환경에서 실제로 중요한 
**데이터베이스 테이블과 필드 수준의 정보**를 제공하는 것을 목표로 합니다.
